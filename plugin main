package com.teurac;

import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.potion.PotionEffect;
import org.bukkit.potion.PotionEffectType;
import org.bukkit.scheduler.BukkitRunnable;
import org.bukkit.scheduler.BukkitTask;
import org.bukkit.scoreboard.Team;
import org.bukkit.util.Vector;


import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.UUID;

import org.bukkit.Bukkit;
import org.bukkit.Color;
import org.bukkit.Effect;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.Particle;
import org.bukkit.Sound;
import org.bukkit.World;
import org.bukkit.block.Block;
import org.bukkit.block.Chest;
import org.bukkit.block.Container;
import org.bukkit.block.data.Powerable;
import org.bukkit.command.Command;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.ArmorStand;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.FallingBlock;
import org.bukkit.entity.HumanEntity;
import org.bukkit.entity.Item;
import org.bukkit.entity.LargeFireball;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import org.bukkit.entity.SmallFireball;
import org.bukkit.entity.Snowball;
import org.bukkit.entity.ThrownPotion;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerItemHeldEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.event.player.PlayerQuitEvent;
import org.bukkit.event.player.PlayerTeleportEvent;
import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
import org.bukkit.event.player.PlayerToggleSneakEvent;
import org.bukkit.event.player.PlayerToggleSprintEvent;
import org.bukkit.inventory.EquipmentSlot;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.InventoryHolder;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.PlayerInventory;
import org.bukkit.inventory.meta.Damageable;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.material.MaterialData;
import org.bukkit.metadata.FixedMetadataValue;
import org.bukkit.metadata.MetadataValue;
import org.bukkit.event.block.Action;
import org.bukkit.event.block.BlockRedstoneEvent;
import org.bukkit.event.block.EntityBlockFormEvent;
import org.bukkit.event.entity.EntityChangeBlockEvent;
import org.bukkit.event.entity.EntityDamageByEntityEvent;
import org.bukkit.event.entity.PotionSplashEvent;
import org.bukkit.event.entity.ProjectileHitEvent;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryOpenEvent;
import org.bukkit.event.inventory.InventoryType;

class Pereche{
	private Player p;
	private int stare;
	
	public Pereche(Player pp,int i) {
		p=pp;
		stare=i;
	}
	public void setPlayer(Player pp) {
		p=pp;
	}
	public void setStare(int i) {
		stare=i;
	}
	public Player getPlayer() {
		return p;
	}
	public int getStare() {
		return stare;
	}
}
public final class RevenirePluginArme extends JavaPlugin {
	byte[] toByteArray(int value) {
	     return  ByteBuffer.allocate(4).putInt(value).array();
	}
	void breakWindow(Block block){
		if(block.getType()==Material.GLASS_PANE) {
			
			block.getWorld().spawnParticle(Particle.BLOCK_DUST, block.getLocation(), 50, 0, 0, 0, 1, Bukkit.createBlockData(Material.GLASS_PANE));
			block.getWorld().playSound(block.getLocation(), Sound.BLOCK_GLASS_BREAK, 1, 1);
			block.setType(Material.AIR);
			breakWindow(block.getLocation().add(0,0,1).getBlock());
			breakWindow(block.getLocation().add(0,1,0).getBlock());
			breakWindow(block.getLocation().add(1,0,0).getBlock());
			breakWindow(block.getLocation().add(0,0,-1).getBlock());
			breakWindow(block.getLocation().add(0,-1,0).getBlock());
			breakWindow(block.getLocation().add(-1,0,0).getBlock());
		}
	}
	
	
	JavaPlugin plugin=this;
	int chesttip=1;
	int chestx=0;
	int chesty=0;
	int chestz=0;
	HashMap<UUID, Long> timpi= new HashMap<UUID, Long>();
	FileOutputStream fileout;
	FileOutputStream fileout1;
	
    @Override
    public void onEnable() {
        getServer().getPluginManager().registerEvents(new listener(), this);
        //BukkitTask hunger=new Hunger().runTaskTimer(plugin, 0, 15);
        
    }
    
    @Override
    public void onDisable() {
    	
    	//Bukkit.getScheduler().cancelTasks(plugin);
    }
    
    @Override
    public boolean onCommand(CommandSender sender,Command cmd,String label,String[] args) {
    	if(cmd.getName().equalsIgnoreCase("clearentity")) {
    		HumanEntity p=(HumanEntity) sender;
    		List<Entity> list = p.getNearbyEntities(70, 70, 70);
    		for(int i=0;i<list.size();i++) {
    			if(list.get(i).getType()!=EntityType.PLAYER)
    				list.get(i).remove();
    		}
    		return true;
    	}
    	if(cmd.getName().equalsIgnoreCase("boom")) {
    		HumanEntity p=(HumanEntity) sender;
    		List<Entity> list = p.getNearbyEntities(20, 20, 20);
    		for(Entity ent : list) {
    			if(ent.getType()==EntityType.PLAYER) {
    				Player player = (Player) ent;
    				player.addPotionEffect(new PotionEffect(PotionEffectType.GLOWING,20,0,false,false,false));
    			}
    		}
    		return true;
    	}
    	if(cmd.getName().equalsIgnoreCase("play")) {
    		
    		Collection<? extends Player> jucatori = getServer().getOnlinePlayers();//pun timpi la 2 sec
    		Iterator<? extends Player> iterator = jucatori.iterator();
    		while(iterator.hasNext()) {
    			timpi.put(iterator.next().getUniqueId(),(long) 2000);
    		}
    		
    		byte[] tip = new byte[4];
    		byte[] x = new byte[4];
    		byte[] y = new byte[4];
    		byte[] z = new byte[4];
    		World w=Bukkit.getWorld("world");
			List<Player> playeri = w.getPlayers();
			for(int h=0;h<playeri.size();h++) {
				Hunger.sprinturi.add(new Pereche(playeri.get(h),1));
				Bukkit.broadcastMessage(String.valueOf(Hunger.sprinturi.get(h).getPlayer().getDisplayName()));
			}
			
			BukkitTask hunger=new Hunger().runTaskTimer(plugin, 100, 30);
			
			try {
				FileInputStream filein1=new FileInputStream("./spawn.abc");
				while (filein1.available() !=0) {
					int count=0;
					filein1.read(x, 0, 4);
					filein1.read(y, 0, 4);
					filein1.read(z, 0, 4);
					double x1=ByteBuffer.wrap(x).getInt();
					double y1=ByteBuffer.wrap(y).getInt();
					double z1=ByteBuffer.wrap(z).getInt();
					Location loc=new Location(w,x1,y1+1,z1);
					Collections.shuffle(playeri);
					List<Entity> list = playeri.get(count).getPassengers();
					playeri.get(count).eject();
					for(int j=0;j<list.size();j++) {
						list.get(j).remove();
					}
					
					playeri.get(count).teleport(loc,TeleportCause.COMMAND); //NU SE POATE TELEPORTA DACA ARE PASAGeR
					count++;
				}
				filein1.close();
			} catch (IOException e) {
				
				e.printStackTrace();
			}
			for(int i=0;i<playeri.size();i++) {//fac numele sa dispara
				ArmorStand stand=w.spawn(w.getSpawnLocation(),ArmorStand.class);
				stand.setMarker(true);
				stand.setVisible(false);
				stand.setInvulnerable(true);
				playeri.get(i).addPassenger(stand);
				
			}
			
    		try {
				FileInputStream filein=new FileInputStream("./prop.abc");
				while (filein.available() !=0) {									//citesc 4 vectori de byte fiecare 4 byte lungime
					
					filein.read(tip, 0, 4);
					filein.read(x, 0, 4);
					filein.read(y, 0, 4);
					filein.read(z, 0, 4);
					
					int tip1=ByteBuffer.wrap(tip).getInt();							//transform in int
					int x1=ByteBuffer.wrap(x).getInt();
					int y1=ByteBuffer.wrap(y).getInt();
					int z1=ByteBuffer.wrap(z).getInt();
					
					Location chestLoc= new Location(w,x1,y1,z1);
					chestLoc.getBlock().setType(Material.CHEST);
					Chest chest=(Chest) chestLoc.getBlock().getState();
					Inventory chestInv=chest.getInventory();
					chestInv.clear();
					double rand=Math.random();
					switch(tip1) {
					case 1:  														//diferite tipuri de chest
						if(rand<0.3) {												//diferite tipuri de continut
							ItemStack glock= new ItemStack(Material.WOODEN_PICKAXE);
							ItemMeta a=glock.getItemMeta();
							a.setDisplayName("15 / 15 - Glock 18");
							List<String> lore=new ArrayList<String>();
							lore.add("15");
							lore.add("15");
							lore.add("Uses 9mm rounds");
							a.setLore(lore);
							glock.setItemMeta(a);
							
							ItemStack glontglock= new ItemStack(Material.RED_DYE,15);
							ItemMeta b=glontglock.getItemMeta();
							b.setDisplayName("9mm Rounds");
							List<String> lore1=new ArrayList<String>();
							lore1.add("For use with Glock 18");
							b.setLore(lore1);
							glontglock.setItemMeta(b);
							
							chestInv.addItem(glock);
							chestInv.addItem(glontglock);
						}
						else if(rand>0.6) {
							ItemStack awp= new ItemStack(Material.DIAMOND_SHOVEL);
							ItemMeta a=awp.getItemMeta();
							a.setDisplayName("5 / 5 - AWP");
							List<String> lore=new ArrayList<String>();
							lore.add("5");
							lore.add("5");
							lore.add("Scope");
							lore.add("Uses .50BMG rounds");
							a.setLore(lore);
							awp.setItemMeta(a);
							
							ItemStack glontawp= new ItemStack(Material.BLUE_DYE,10);
							ItemMeta b=glontawp.getItemMeta();
							b.setDisplayName(".50BMG Rounds");
							List<String> lore1=new ArrayList<String>();
							lore1.add("For use with AWP");
							b.setLore(lore1);
							glontawp.setItemMeta(b);
							
							chestInv.addItem(awp);
							chestInv.addItem(glontawp);
						}else if(rand<1) {
							ItemStack minigun= new ItemStack(Material.DIAMOND_AXE);
							ItemMeta a=minigun.getItemMeta();
							a.setDisplayName("100 / 100 - Minigun");
							List<String> lore=new ArrayList<String>();
							lore.add("100");
							lore.add("100");
							lore.add("Uses 7.26mm rounds");
							a.setLore(lore);
							minigun.setItemMeta(a);
							
							ItemStack glontminigun= new ItemStack(Material.PINK_DYE,64);
							ItemMeta b=glontminigun.getItemMeta();
							b.setDisplayName("7.26mm Rounds");
							List<String> lore1=new ArrayList<String>();
							lore1.add("For use with Minigun");
							b.setLore(lore1);
							glontminigun.setItemMeta(b);
							
							ItemStack glontminigun1= new ItemStack(Material.PINK_DYE,36);
							ItemMeta c=glontminigun1.getItemMeta();
							c.setDisplayName("7.26mm Rounds");
							List<String> lore2=new ArrayList<String>();
							lore2.add("For use with Minigun");
							c.setLore(lore2);
							glontminigun1.setItemMeta(c);
							
							chestInv.addItem(minigun);
							chestInv.addItem(glontminigun);
							chestInv.addItem(glontminigun1);
							
						}
						break;
					case 2:
						ItemStack band= new ItemStack(Material.PAPER,2);
						ItemMeta a=band.getItemMeta();
						a.setDisplayName("Bandage");
						List<String> lore=new ArrayList<String>();
						lore.add("Restores 2 hearts");
						a.setLore(lore);
						band.setItemMeta(a);
						chestInv.addItem(band);
						break;
					}
					
					
				}
				filein.close();
				return true;
			} catch (IOException e) {
				
				e.printStackTrace();
			}
    	}
    	if(cmd.getName().equalsIgnoreCase("stopgame")) {
    		Hunger.sprinturi.removeAll(Hunger.sprinturi);
    		
    		Bukkit.getScheduler().cancelTasks(plugin);		
    		return true;
    	}
    	if(cmd.getName().equalsIgnoreCase("begin")) { //deschid fisier
			try {
				
				fileout = new FileOutputStream("./prop.abc",true);
				fileout1 = new FileOutputStream("./spawn.abc",true);
				return true;
			} catch (IOException e) {
				
				e.printStackTrace();
			}
		}
    	if(cmd.getName().equalsIgnoreCase("end")) { //inchid fisier
			try {
				
				fileout.close();
				return true;
			} catch (IOException e) {
				
				e.printStackTrace();
			}
		}
    	
    	return false;
    }
    
    
    
    
    public final class listener implements Listener {
    	
		@EventHandler
    	public void onRightClick(PlayerInteractEvent event) {
			//Bukkit.broadcastMessage(String.valueOf(Hunger.sprinturi.get(0).getStare()));
    		Player player=event.getPlayer();
    		UUID uuid = player.getUniqueId();
			Location loc=player.getLocation();
			World world=player.getWorld();
			PlayerInventory inv=player.getInventory();
			ItemStack item=inv.getItemInMainHand();
			EquipmentSlot es=event.getHand();
			
    		if(event.getAction()==Action.LEFT_CLICK_AIR || event.getAction()==Action.LEFT_CLICK_BLOCK) {
    				ItemMeta meta=item.getItemMeta();
    				List<String> lore = meta.getLore();

    			if(event.getItem().getType()==Material.WOODEN_PICKAXE && Integer.valueOf(lore.get(1)) != -1) {//remove mag glock
    				ItemStack clip = new ItemStack(Material.IRON_INGOT,1);//creez clip
    				ItemMeta clipmeta= clip.getItemMeta();
    				List<String> loreclip = new ArrayList<String>();
    				loreclip.add(lore.get(0));
    				loreclip.add(lore.get(1));
    				clipmeta.setLore(loreclip);
    				clipmeta.setDisplayName(loreclip.get(0)+" / "+loreclip.get(1)+" - Glock 18 Magazine");
    				clip.setItemMeta(clipmeta);
    				inv.addItem(clip);
    				
    				lore.set(0,"-1");
    				lore.set(1,"-1");
    				meta.setLore(lore);
    				meta.setDisplayName("No Magazine - Glock 18");
    				item.setItemMeta(meta);
    			}
    			if(event.getItem().getType()==Material.DIAMOND_AXE && Integer.valueOf(lore.get(1)) != -1) {//remove mag glock
    				ItemStack clip = new ItemStack(Material.IRON_INGOT,1);//creez clip
    				ItemMeta clipmeta= clip.getItemMeta();
    				List<String> loreclip = new ArrayList<String>();
    				loreclip.add(lore.get(0));
    				loreclip.add(lore.get(1));
    				clipmeta.setLore(loreclip);
    				clipmeta.setDisplayName(loreclip.get(0)+" / "+loreclip.get(1)+" - Minigun Magazine");
    				clip.setItemMeta(clipmeta);
    				inv.addItem(clip);
    				
    				lore.set(0,"-1");
    				lore.set(1,"-1");
    				meta.setLore(lore);
    				meta.setDisplayName("No Magazine - Minigun");
    				item.setItemMeta(meta);
    			}
    			if(event.getItem().getType()==Material.DIAMOND_SHOVEL && Integer.valueOf(lore.get(1)) != -1) {//remove mag glock
    				ItemStack clip = new ItemStack(Material.IRON_INGOT,1);//creez clip
    				ItemMeta clipmeta= clip.getItemMeta();
    				List<String> loreclip = new ArrayList<String>();
    				loreclip.add(lore.get(0));
    				loreclip.add(lore.get(1));
    				clipmeta.setLore(loreclip);
    				clipmeta.setDisplayName(loreclip.get(0)+" / "+loreclip.get(1)+" - AWP Magazine");
    				clip.setItemMeta(clipmeta);
    				inv.addItem(clip);
    				
    				lore.set(0,"-1");
    				lore.set(1,"-1");
    				meta.setLore(lore);
    				meta.setDisplayName("No Magazine - AWP");
    				item.setItemMeta(meta);
    			}
    			if(event.getItem().getType()==Material.IRON_INGOT && !lore.contains("Reloading")) {
    				lore.add("Reloading");
    				meta.setLore(lore);
    				item.setItemMeta(meta);
    				BukkitTask task = new Cooldown(plugin, item, inv).runTaskTimer(plugin, 0, 10);
    			

    			}
    		
    		}
   
    		if(es!=null)
			if((es.equals(EquipmentSlot.HAND) && (event.getAction()==Action.RIGHT_CLICK_AIR || event.getAction()==Action.RIGHT_CLICK_BLOCK))) {
				
				
				if(item.getType()==Material.STICK ) {
					try {
						Bukkit.getLogger().info("chest pos mark");
						//FileOutputStream out = new FileOutputStream("./prop.abc");
						int x = event.getClickedBlock().getLocation().getBlockX();
						int y = event.getClickedBlock().getLocation().getBlockY();
						int z = event.getClickedBlock().getLocation().getBlockZ();
						if(chestx==x && chesty==y && chestz==z) {
							chesttip=chesttip+1;
						}else {
							chesttip=1;
						}
						Bukkit.getLogger().info(String.valueOf(chesttip));
						fileout.write(toByteArray(chesttip),0,4);
						fileout.write(toByteArray(x),0,4);
						fileout.write(toByteArray(y),0,4);
						fileout.write(toByteArray(z),0,4);
						chestx=x;
						chesty=y;
						chestz=z;
						//out.close();
						
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
				if(item.getType()==Material.FEATHER ) {
					try {
						Bukkit.getLogger().info("spawn pos mark");
						//FileOutputStream out = new FileOutputStream("./prop.abc");
						
						fileout1.write(toByteArray(event.getClickedBlock().getLocation().getBlockX()),0,4);
						fileout1.write(toByteArray(event.getClickedBlock().getLocation().getBlockY()),0,4);
						fileout1.write(toByteArray(event.getClickedBlock().getLocation().getBlockZ()),0,4);
						
						//out.close();
						
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
				if(item.getType()==Material.TNT && event.getAction()==Action.RIGHT_CLICK_BLOCK) {//doar daca da click pe un block
					int slot=inv.getHeldItemSlot();
					ItemStack tnt=new ItemStack(Material.TNT,inv.getItem(slot).getAmount()-1);
					inv.setItem(slot, tnt);
					Block block = event.getClickedBlock();
					ItemStack det=new ItemStack(Material.ARROW);
					ItemMeta a = det.getItemMeta();
					a.setDisplayName("Detonator - "+String.valueOf(block.getX())+" / "+String.valueOf(block.getY())+" / "+String.valueOf(block.getZ()));
					List<String> lore=new ArrayList<String>();
					lore.add(String.valueOf(block.getX()));
					lore.add(String.valueOf(block.getY()));
					lore.add(String.valueOf(block.getZ()));
					lore.add("Right click to detonate");
					a.setLore(lore);
					det.setItemMeta(a);
					inv.addItem(det);

					event.setCancelled(true);
				}
				if(item.getType()==Material.PAPER) {
					ItemMeta meta = item.getItemMeta();
					List<String> lore = meta.getLore();
					if(!lore.contains("Reloading")) {
						lore.add("Reloading");
						meta.setLore(lore);
						item.setItemMeta(meta);
						new Cooldown(plugin, item, inv).runTaskLater(plugin, 150);
					}
				}
				if(item.getType()==Material.ARROW) {
					int slot=inv.getHeldItemSlot();
					
					ItemStack det = inv.getItemInMainHand();
					ItemMeta a = det.getItemMeta();
					List<String> lore = a.getLore();
					loc=new Location(world,Integer.parseInt(lore.get(0)),Integer.parseInt(lore.get(1)),Integer.parseInt(lore.get(2)));
					Block block = world.getBlockAt(loc);
					Grenade.explozie(block, 10, block);
					world.createExplosion(loc, 4,false,false);
					inv.clear(slot);
					
				}
				if(item.getType()==Material.MAGMA_CREAM) {
					int slot=inv.getHeldItemSlot();
					inv.setItem(slot, new ItemStack(Material.MAGMA_CREAM,inv.getItem(slot).getAmount()-1));
					
					double yaw=loc.getYaw();
					double pitch= loc.getPitch();
					//double x = -Math.sin(yaw*Math.PI/180);
					//double y = 1.5;
					//double z = Math.cos(yaw*Math.PI/180);
					//Vector pos= new Vector(x,y,z);
					double y1 = -Math.sin((pitch)*Math.PI/180);
					double x1 = (-Math.sin((yaw)*Math.PI/180))*Math.sin((pitch+90)*Math.PI/180);
					double z1 = (Math.cos((yaw)*Math.PI/180))*Math.sin((pitch+90)*Math.PI/180);
			
					Vector viteza= new Vector(x1,y1,z1).multiply(1);
					Item grenada=world.dropItem(player.getLocation().add(0,1.4,0), new ItemStack(Material.MAGMA_CREAM,1));
					grenada.setVelocity(viteza);
					ItemStack inter = new ItemStack(Material.MAGMA_CREAM,1);
					ItemMeta inter1 = inter.getItemMeta();
					inter1.setDisplayName(String.valueOf(Math.random()*1000));
					inter.setItemMeta(inter1);
					grenada.setItemStack(inter);
					grenada.setPickupDelay(100);
					
					BukkitTask task = new Grenade(grenada).runTaskLater(plugin, 70);
					
				}
				if(item.getType()==Material.BLAZE_ROD) {
					int slot=inv.getHeldItemSlot();
					inv.setItem(slot, new ItemStack(Material.BLAZE_ROD,inv.getItem(slot).getAmount()-1));
					
					double yaw=loc.getYaw();
					double pitch= loc.getPitch();
					//double x = -Math.sin(yaw*Math.PI/180);
					//double y = 1.5;
					//double z = Math.cos(yaw*Math.PI/180);
					//Vector pos= new Vector(x,y,z);
					double y1 = -Math.sin((pitch)*Math.PI/180);
					double x1 = (-Math.sin((yaw)*Math.PI/180))*Math.sin((pitch+90)*Math.PI/180);
					double z1 = (Math.cos((yaw)*Math.PI/180))*Math.sin((pitch+90)*Math.PI/180);
			
					Vector viteza= new Vector(x1,y1,z1).multiply(1);
					Item grenada=world.dropItem(player.getLocation().add(0,1.4,0), new ItemStack(Material.BLAZE_ROD,1));
					grenada.setVelocity(viteza);
					ItemStack inter = new ItemStack(Material.BLAZE_ROD,1);
					ItemMeta inter1 = inter.getItemMeta();
					inter1.setDisplayName(String.valueOf(Math.random()*1000));
					inter.setItemMeta(inter1);
					grenada.setItemStack(inter);
					grenada.setPickupDelay(1000);
					
					BukkitTask task = new Grenade(grenada).runTaskLater(plugin, 30);
					
				}
				if (item.getType()==Material.BLAZE_POWDER) {
					int slot=inv.getHeldItemSlot();
					inv.setItem(slot, new ItemStack(Material.BLAZE_POWDER,inv.getItem(slot).getAmount()-1));
					double yaw=loc.getYaw();
					double pitch= loc.getPitch();
					//double x = -Math.sin(yaw*Math.PI/180);
					//double y = 1.5;
					//double z = Math.cos(yaw*Math.PI/180);
					//Vector pos= new Vector(x,y,z);
					double y1 = -Math.sin((pitch)*Math.PI/180);
					double x1 = (-Math.sin((yaw)*Math.PI/180))*Math.sin((pitch+90)*Math.PI/180);
					double z1 = (Math.cos((yaw)*Math.PI/180))*Math.sin((pitch+90)*Math.PI/180);
			
					Vector viteza= new Vector(x1,y1,z1).multiply(1.2);
					Item grenada=world.dropItem(player.getLocation().add(0,1.4,0), new ItemStack(Material.BLAZE_POWDER,1));
					grenada.setVelocity(viteza);
					ItemStack inter = new ItemStack(Material.BLAZE_POWDER,1);
					ItemMeta inter1 = inter.getItemMeta();
					inter1.setDisplayName(String.valueOf(Math.random()*1000));
					inter.setItemMeta(inter1);
					grenada.setItemStack(inter);
					grenada.setPickupDelay(500);
					BukkitTask task = new Grenade(grenada).runTaskLater(plugin, 50);
				}
				
				
				if (item.getType()==Material.SLIME_BALL) {
					int slot=inv.getHeldItemSlot();
					inv.setItem(slot, new ItemStack(Material.SLIME_BALL,inv.getItem(slot).getAmount()-1));
					double yaw=loc.getYaw();
					double pitch= loc.getPitch();
					//double x = -Math.sin(yaw*Math.PI/180);
					//double y = 1.5;
					//double z = Math.cos(yaw*Math.PI/180);
					//Vector pos= new Vector(x,y,z);
					double y1 = -Math.sin((pitch)*Math.PI/180);
					double x1 = (-Math.sin((yaw)*Math.PI/180))*Math.sin((pitch+90)*Math.PI/180);
					double z1 = (Math.cos((yaw)*Math.PI/180))*Math.sin((pitch+90)*Math.PI/180);
			
					Vector viteza= new Vector(x1,y1,z1).multiply(1);
					Item grenada=world.dropItem(player.getLocation().add(0,1.4,0), new ItemStack(Material.SLIME_BALL,1));
					grenada.setVelocity(viteza);
					ItemStack inter = new ItemStack(Material.SLIME_BALL,1);
					ItemMeta inter1 = inter.getItemMeta();
					inter1.setDisplayName(String.valueOf(Math.random()*1000));
					inter.setItemMeta(inter1);
					grenada.setItemStack(inter);
					grenada.setPickupDelay(500);
					BukkitTask task = new Grenade(grenada).runTaskTimer(plugin, 70,5);
				}
				if(item.getType()==Material.DIAMOND_SHOVEL ) {
					boolean trage=false;
					
    				String arma = "AWP";
    				ItemMeta meta=item.getItemMeta();
					List<String> lore = meta.getLore();
					int nrg = Integer.parseInt(lore.get(0));
					double dif=(double)(System.currentTimeMillis()-timpi.get(uuid))/1000;
					//Bukkit.broadcastMessage(String.valueOf(());
					if(lore.contains("Reloading") || nrg==0 || dif<2 || !lore.contains("Scope") || !player.isSneaking()) {
    					trage=false;}
					else {
						if(nrg>=1) { //se scade din nrgloante
							lore.set(0, String.valueOf(nrg-1));
							meta.setDisplayName(lore.get(0)+ " / "+lore.get(1)+" - AWP");
							meta.setLore(lore);
							item.setItemMeta(meta);
							trage=true;
						}
					}
    				if(trage==true) {
    					double yaw=loc.getYaw();
    					double pitch= loc.getPitch();
    					double x = -Math.sin(yaw*Math.PI/180)*0.8;
    					double y = 1.5;
    					double z = Math.cos(yaw*Math.PI/180)*0.8;
    					if(player.isSneaking()) {
    						y=1.1;
    					}
    					Vector pos= new Vector(x,y,z);
    					double y1 = -Math.sin((pitch)*Math.PI/180);	
    					double x1 = (-Math.sin((yaw)*Math.PI/180))*Math.sin((pitch+90)*Math.PI/180);
    					double z1 = (Math.cos((yaw)*Math.PI/180))*Math.sin((pitch+90)*Math.PI/180);
    					Vector viteza= new Vector(x1,y1,z1).multiply(4);
    					Snowball glont=world.spawn(loc.add(pos), Snowball.class);
    					
    					//Bukkit.broadcastMessage("tras");
    					
    		            glont.setVelocity(viteza);
    					glont.setShooter(player);
    					glont.setGravity(false);
    					glont.setMetadata(arma,new FixedMetadataValue(plugin,1));
    					player.spawnParticle(Particle.FIREWORKS_SPARK, player.getLocation().add(pos), 1, 0, 0, 0, 0);
    					world.playSound(loc, Sound.ENTITY_GENERIC_SMALL_FALL, (float)1.0, (float)0.5);
    					timpi.put(uuid, System.currentTimeMillis());
    				}else if(nrg<=0){
    					world.playSound(loc, Sound.ENTITY_SKELETON_STEP, 1, 3);
    				}
					
					
				}
				if(item.getType()==Material.DIAMOND_AXE ) {
    				boolean trage=false;
    				double deviatie=1;
    				String arma = "Minigun";
    				ItemMeta meta=item.getItemMeta();
					List<String> lore = meta.getLore();
					double dif=(double)(System.currentTimeMillis()-timpi.get(uuid))/1000;
					int nrg = Integer.parseInt(lore.get(0));
					if(lore.contains("Reloading") || nrg==0 || dif<0.19) {
    					trage=false;}
					else {
						
						if(nrg>=1) { //se scade din nrgloante
							lore.set(0, String.valueOf(nrg-1));
							meta.setDisplayName(lore.get(0)+ " / "+lore.get(1)+" - Minigun");
							meta.setLore(lore);
							item.setItemMeta(meta);
							trage=true;
						}
					}
    				if(trage==true) {//recoil
    					for(int h=0;h<3;h++) {
    					
    						BukkitTask task= new DelayAS(world,player,plugin).runTaskLater(plugin, h*10);
    		            	timpi.put(uuid, System.currentTimeMillis());
    					}
    				}else if(nrg<=0){
    					world.playSound(loc, Sound.ENTITY_SKELETON_STEP, 1, 3);
    				}
    			}
    			if(item.getType()==Material.WOODEN_PICKAXE ) {
    				boolean trage=false;
    				double deviatie;
    				String arma = "Glock_18";
    				ItemMeta meta=item.getItemMeta();
					List<String> lore = meta.getLore();
					int nrg = Integer.parseInt(lore.get(0));
					if(lore.contains("Reloading") || nrg==0) {
    					trage=false;}
					else {
						
						if(nrg>=1) { //se scade din nrgloante
							lore.set(0, String.valueOf(nrg-1));
							meta.setDisplayName(lore.get(0)+ " / "+lore.get(1)+" - Glock 18");
							meta.setLore(lore);
							item.setItemMeta(meta);
							trage=true;
						}
					}
    				if(trage==true) {//recoil
    					double dif=((double)(System.currentTimeMillis()-timpi.get(uuid)))/1000;
    					if (1-dif>0) {
    						deviatie=1-dif;
    					}else {
    						deviatie=0;
    					}
    					
    					double yaw=loc.getYaw();
    					double pitch= loc.getPitch();
    					double x = -Math.sin(yaw*Math.PI/180)*0.8;
    					double y = 1.5;
    					double z = Math.cos(yaw*Math.PI/180)*0.8;
    					if(player.isSneaking()) {
    						y=1.1;
    					}
    					Vector pos= new Vector(x,y,z);
    					double y1 = -Math.sin((pitch+deviatie*(Math.random()*7-3.5))*Math.PI/180);	//3 si 1.5 sunt cat de imprastiat sa fie
    					double x1 = (-Math.sin((yaw+deviatie*(Math.random()*7-3.5))*Math.PI/180))*Math.sin((pitch+deviatie*(Math.random()*7-3.5)+90)*Math.PI/180);
    					double z1 = (Math.cos((yaw+deviatie*(Math.random()*7-3.5))*Math.PI/180))*Math.sin((pitch+deviatie*(Math.random()*7-3.5)+90)*Math.PI/180);
    			
    					Vector viteza= new Vector(x1,y1,z1).multiply(4);
    					Snowball glont=world.spawn(player.getLocation().add(pos), Snowball.class);
    					
    					//Bukkit.broadcastMessage("tras");
    					
    		            glont.setVelocity(viteza);
    					glont.setShooter(player);
    					glont.setGravity(false);
    					glont.setMetadata(arma,new FixedMetadataValue(plugin,1));
    					player.spawnParticle(Particle.FIREWORKS_SPARK, player.getLocation().add(pos), 1, 0, 0, 0, 0);
    					timpi.put(uuid, System.currentTimeMillis());
    				}else if(nrg<=0){
    					world.playSound(loc, Sound.ENTITY_SKELETON_STEP, 1, 3);
    				}
    			}
    			if(item.getType()==Material.WOODEN_AXE) {
    				String arma="Shotgun";
    				double yaw=loc.getYaw();
    				double pitch= loc.getPitch();
    				
    				double x = -Math.sin(yaw*Math.PI/180);
    				double y = 1.6;
    				double z = Math.cos(yaw*Math.PI/180);
    				Vector[] pos= new Vector[7];
    				Vector[] viteza= new Vector[7];
    				Snowball[] gloante = new Snowball[7]; 
    				
    				if(System.currentTimeMillis()-timpi.get(uuid)>=1000) {
    				
    				for(int i=0;i<pos.length;i++) {
    					pos[i]=new Vector(x,y,z);
    					
    					double y1 = -Math.sin((pitch+(Math.random()*5-2.5))*Math.PI/180);
        				double x1 = -Math.sin((yaw+(Math.random()*5-2.5))*Math.PI/180)*Math.sin((pitch+90+(Math.random()*5-2.5))*Math.PI/180);
        				double z1 = Math.cos((yaw+(Math.random()*5-2.5))*Math.PI/180)*Math.sin((pitch+90+(Math.random()*5-2.5))*Math.PI/180);
    					viteza[i]=new Vector(x1,y1,z1);
    					gloante[i]=world.spawn(player.getLocation().add(pos[i]),Snowball.class);
    					gloante[i].setVelocity(viteza[i].multiply(3));
        				gloante[i].setShooter(player);
        				gloante[i].setGravity(false);
        				gloante[i].setMetadata(arma,new FixedMetadataValue(plugin,1));
    				}
    				timpi.put(uuid, System.currentTimeMillis());
    			}
    				
    				
    			}
    			if(item.getType()==Material.GOLDEN_AXE) {
    				
    				String arma="rl";
    				
    				double yaw=loc.getYaw();
    				double pitch= loc.getPitch();
    				double x = -Math.sin(yaw*Math.PI/180);
    				double y = 1.6;
    				double z = Math.cos(yaw*Math.PI/180);
    				Vector pos= new Vector(x,y,z);
    				double y1 = -Math.sin(pitch*Math.PI/180);
    				double x1 = x*Math.sin((pitch+90)*Math.PI/180);
    				double z1 = z*Math.sin((pitch+90)*Math.PI/180);
    			
    				Vector viteza= new Vector(x1,y1,z1);
    				
    				LargeFireball racheta=world.spawn(player.getLocation().add(pos),LargeFireball.class);
    				racheta.setVelocity(viteza);
    				racheta.setShooter(player);
    				racheta.setYield(3);
    				
    			}
    			
    		}
    		
    	}
    	
		@EventHandler
		public void onInventoryClick(InventoryClickEvent event) {
			if(event.getClickedInventory()!=null)
			if(event.getClickedInventory().getType()==InventoryType.PLAYER) {
				Player inv = (Player) event.getClickedInventory().getHolder();
				if(inv.getInventory().getItemInMainHand()!=null) {
				ItemMeta metap = inv.getInventory().getItemInMainHand().getItemMeta();
				//Bukkit.broadcastMessage(inv.getDisplayName());
				List<String> lorep;
				if(metap!=null) {
					if(metap.getLore()!=null) {
						lorep = metap.getLore();
					}else {
						lorep=new ArrayList<>();
					}
				}else {
					lorep=new ArrayList<>();
					if(!lorep.contains("Reloading")) {
						ItemStack item=event.getCurrentItem();
						ItemStack item1=event.getCursor();
						if(item1.getType()==Material.IRON_INGOT && item.getType()==Material.DIAMOND_SHOVEL) {
							ItemMeta meta=item.getItemMeta();
							ItemMeta meta1=item1.getItemMeta();
							List<String> lore=meta.getLore();
							List<String> lore1=meta1.getLore();
							if(Integer.valueOf(lore.get(1))==-1) {//doar daca e gol
								lore.set(0,lore1.get(0));
								lore.set(1,lore1.get(1));
								meta.setLore(lore);
								meta.setDisplayName(lore.get(0)+" / "+lore.get(1)+" - AWP");
								item.setItemMeta(meta);
								event.setCursor(null);
								event.setCancelled(true);
							}
						}
					if(item1.getType()==Material.IRON_INGOT && item.getType()==Material.DIAMOND_AXE) {
						ItemMeta meta=item.getItemMeta();
						ItemMeta meta1=item1.getItemMeta();
						List<String> lore=meta.getLore();
						List<String> lore1=meta1.getLore();
						if(Integer.valueOf(lore.get(1))==-1) {//doar daca e gol
							lore.set(0,lore1.get(0));
							lore.set(1,lore1.get(1));
							meta.setLore(lore);
							meta.setDisplayName(lore.get(0)+" / "+lore.get(1)+" - Minigun");
							item.setItemMeta(meta);
							event.setCursor(null);
							event.setCancelled(true);
						}
					}
					if(item1.getType()==Material.IRON_INGOT && item.getType()==Material.WOODEN_PICKAXE) {
						
						ItemMeta meta=item.getItemMeta();
						ItemMeta meta1=item1.getItemMeta();
						if(meta.hasLore()) {
							List<String> lore=meta.getLore();
							List<String> lore1=meta1.getLore();
							if(Integer.valueOf(lore.get(1))==-1) {//doar daca e gol
								lore.set(0,lore1.get(0));
								lore.set(1,lore1.get(1));
								meta.setLore(lore);
								meta.setDisplayName(lore.get(0)+" / "+lore.get(1)+" - Glock 18");
								item.setItemMeta(meta);
								event.setCursor(null);
								event.setCancelled(true);
							}
						}else {
							Bukkit.getLogger().info("b");
							List<String> lore=new ArrayList<String>();
							lore.add("Extended Magazine");
							lore.set(1,"20");
							meta.setLore(lore);
							item.setItemMeta(meta);
						}
						
						//event.setCancelled(true);
						
					}
					if(item1.getType()==Material.GLASS && item.getType()==Material.WOODEN_PICKAXE) {
						
						ItemMeta meta=item.getItemMeta();
						
						event.setCursor(null);
						if(meta.hasLore()) {
							List<String> lore=meta.getLore();
							if(!lore.contains("Scope")) {
								Bukkit.getLogger().info("a");
							
								lore.add("Scope");
								meta.setLore(lore);
								item.setItemMeta(meta);
							}
						}else {
							Bukkit.getLogger().info("b");
							List<String> lore=new ArrayList<String>();
							lore.add("Scope");
							meta.setLore(lore);
							item.setItemMeta(meta);
						}
					}
				}else {
					event.setCancelled(true);
				}
				}}
			}
		}

		@EventHandler
		public void onInventoryOpen(InventoryOpenEvent event) {//nu intra la propriul inv
			
			//nu deschide inventarul
			ItemStack item=event.getPlayer().getInventory().getItemInMainHand();
			ItemMeta meta=item.getItemMeta();
			List<String> lore=meta.getLore();
			Bukkit.broadcastMessage("inv");
			if(lore.contains("Reloading")) {
				event.getPlayer().sendMessage("You are reloading");
				event.setCancelled(true);
			}
			
		}
		
		
		@EventHandler
		public void onItemSwitch(PlayerItemHeldEvent event) {
			ItemStack item=event.getPlayer().getInventory().getItemInMainHand();
			ItemMeta meta=item.getItemMeta();
			if(meta!=null) {
				List<String> lore=meta.getLore();
				if(lore!=null) {
					if(lore.contains("Reloading")) {
						event.setCancelled(true);
					}
				}
			}
			
			UUID uuid = event.getPlayer().getUniqueId();
			timpi.put(uuid,System.currentTimeMillis());
			
		}
		
		@EventHandler
		public void onProjectileHit(ProjectileHitEvent event) {
			if (event.getHitBlock() != null) {
				Block block = event.getHitBlock();
				if(block.getType()==Material.GLASS_PANE) {
					breakWindow(block);
				}
			}
		}
		
		@EventHandler
		public void onSneak(PlayerToggleSneakEvent event) {
			Player player = event.getPlayer();
			ItemStack item=player.getInventory().getItemInMainHand();
			if(item.hasItemMeta()) {
				ItemMeta meta = item.getItemMeta();
				List<String> lore=meta.getLore();
				if(lore.contains("Scope")) {
					if(event.isSneaking()) {
						player.addPotionEffect(new PotionEffect(PotionEffectType.SLOW,99999,14));
					}else {
				
						player.removePotionEffect(PotionEffectType.SLOW);
					}
				}
			}
		}
			
		@EventHandler
		public void onJoin(PlayerJoinEvent event) {
			Hunger.sprinturi.add(new Pereche(event.getPlayer(),1));
		}
		@EventHandler
		public void onLeave(PlayerQuitEvent event) {
			for(int h=0;h<Hunger.sprinturi.size();h++) {
				if(Hunger.sprinturi.get(h).getPlayer().getDisplayName()==event.getPlayer().getDisplayName()) {
					Hunger.sprinturi.remove(h);
					break;
				}
			}
			
		}
		@EventHandler
		public void onSprint(PlayerToggleSprintEvent event) {
			Player player=event.getPlayer();
			if(event.isSprinting()) {//astea 2 intoarse
				//astea
					Bukkit.broadcastMessage("sprint");
					for(int l=0;l<Hunger.sprinturi.size();l++) {
						if(Hunger.sprinturi.get(l).getPlayer().equals(player)) {
							Hunger.sprinturi.get(l).setStare(-1);
						}
					}
				}else {
					for(int l=0;l<Hunger.sprinturi.size();l++) {
						if(Hunger.sprinturi.get(l).getPlayer().equals(player) && player.getFoodLevel()>7) {
							Hunger.sprinturi.get(l).setStare(1);
						}
					}
					Bukkit.broadcastMessage("stop sprint");
					
				}
			} 
		@EventHandler
	    public void onEntityChangeBlockEvent(EntityChangeBlockEvent event) {
	        if (event.getEntity().getType()==EntityType.FALLING_BLOCK) {
	            FallingBlock fallingBlock = (FallingBlock) event.getEntity();
	            fallingBlock.getLocation().getBlock().setType(Material.AIR);
	            fallingBlock.setDropItem(false);
	            fallingBlock.remove();
	            event.setCancelled(true);
	            
	        }
	    }
    	
    	@EventHandler
    	public void onTakeDmg(EntityDamageByEntityEvent event) {
    		LivingEntity lovitul=(LivingEntity) event.getEntity();
    		Entity lovitorul=event.getDamager();
    		double dmg;
    		if(!lovitorul.isDead()) {
    			//String nume=new String(lovitorul.getName());
    			List<MetadataValue> gloanteglock=lovitorul.getMetadata("Glock_18");
    			List<MetadataValue> gloanteshotgun=lovitorul.getMetadata("Shotgun");
    			List<MetadataValue> gloantemini=lovitorul.getMetadata("Minigun");
    			List<MetadataValue> gloanteawp=lovitorul.getMetadata("AWP");
    			for(int i=0;i<gloanteglock.size();i++) {// -----------------GLOCK
    				if(gloanteglock.get(i).asInt()==1) {
    					Bukkit.broadcastMessage("lovit");
    					dmg=(double) 4-lovitorul.getTicksLived()/10;
    					Bukkit.broadcastMessage(String.valueOf(dmg));
						//gethelmet null
    					if(lovitorul.getLocation().getY()< lovitul.getEyeHeight()+lovitul.getLocation().getY()+0.25 && lovitorul.getLocation().getY()> lovitul.getEyeHeight()+lovitul.getLocation().getY()-0.25) {
    						if(lovitul.getEquipment().getHelmet()==null) {
    							dmg=dmg*2.3;
								lovitul.getWorld().spawnParticle(Particle.BLOCK_DUST, lovitul.getLocation().add(0,2,0), 100, Bukkit.createBlockData(Material.REDSTONE_BLOCK));
    							lovitul.getWorld().playSound(lovitul.getLocation(),Sound.BLOCK_SLIME_BLOCK_BREAK,(float)2.0,(float)1.0);

    						}else {
    							if(lovitul.getEquipment().getHelmet().getType()==Material.IRON_HELMET) {
    								
    								dmg=dmg*0.4;
    								lovitul.getWorld().spawnParticle(Particle.BLOCK_DUST, lovitul.getLocation().add(0,2,0), 100, Bukkit.createBlockData(Material.IRON_BLOCK));
    								lovitul.getWorld().playSound(lovitul.getLocation(),Sound.BLOCK_BELL_USE,(float)2.0,(float)2.0);
    							}
    						}
    					}else{                            //end hs if
    						if(lovitul.getEquipment().getChestplate()!=null) {
    						if(lovitul.getEquipment().getChestplate().getType()==Material.CHAINMAIL_CHESTPLATE) {
    							dmg=dmg*0.4;
    						}
    					}
    					}
    					
    					if (dmg>0) {
    						lovitul.damage(dmg);
    						Bukkit.broadcastMessage(String.valueOf(dmg));
    					}
    					lovitul.setNoDamageTicks(0);
    					
    				}
    			}
    			for(int i=0;i<gloanteawp.size();i++) {// -----------------AWP
    				if(gloanteawp.get(i).asInt()==1) {
    					Bukkit.broadcastMessage("lovit");
    					dmg=(double) 10-lovitorul.getTicksLived()/10;
    					Bukkit.broadcastMessage(String.valueOf(dmg));
						//gethelmet null
    					if(lovitorul.getLocation().getY()< lovitul.getEyeHeight()+lovitul.getLocation().getY()+0.25 && lovitorul.getLocation().getY()> lovitul.getEyeHeight()+lovitul.getLocation().getY()-0.25) {
    						if(lovitul.getEquipment().getHelmet()==null) {
    							dmg=dmg*2.3;
								lovitul.getWorld().spawnParticle(Particle.BLOCK_DUST, lovitul.getLocation().add(0,2,0), 100, Bukkit.createBlockData(Material.REDSTONE_BLOCK));
    							lovitul.getWorld().playSound(lovitul.getLocation(),Sound.BLOCK_SLIME_BLOCK_BREAK,(float)2.0,(float)1.0);

    						}else {
    							if(lovitul.getEquipment().getHelmet().getType()==Material.IRON_HELMET) {
    								
    								dmg=dmg*0.8;
    								lovitul.getWorld().spawnParticle(Particle.BLOCK_DUST, lovitul.getLocation().add(0,2,0), 100, Bukkit.createBlockData(Material.IRON_BLOCK));
    								lovitul.getWorld().playSound(lovitul.getLocation(),Sound.BLOCK_BELL_USE,(float)2.0,(float)2.0);
    							}
    						}
    					}else{                            //end hs if
    						if(lovitul.getEquipment().getChestplate()!=null) {
    							if(lovitul.getEquipment().getChestplate().getType()==Material.CHAINMAIL_CHESTPLATE) {
    								dmg=dmg*0.6;
    							}
    						}
    					}
    					
    					if (dmg>0) {
    						lovitul.damage(dmg);
    						Bukkit.broadcastMessage(String.valueOf(dmg));
    					}
    					lovitul.setNoDamageTicks(0);
    				}
    			}
    			for(int i=0;i<gloantemini.size();i++) {// -----------------minigun
    				if(gloantemini.get(i).asInt()==1) {
    					Bukkit.broadcastMessage("lovit");
    					dmg=(double) 4-lovitorul.getTicksLived()/10;
    					Bukkit.broadcastMessage(String.valueOf(dmg));
						//gethelmet null
    					if(lovitorul.getLocation().getY()< lovitul.getEyeHeight()+lovitul.getLocation().getY()+0.25 && lovitorul.getLocation().getY()> lovitul.getEyeHeight()+lovitul.getLocation().getY()-0.25) {
    						if(lovitul.getEquipment().getHelmet()==null) {
    							dmg=dmg*2.3;
								lovitul.getWorld().spawnParticle(Particle.BLOCK_DUST, lovitul.getLocation().add(0,2,0), 100, Bukkit.createBlockData(Material.REDSTONE_BLOCK));
    							lovitul.getWorld().playSound(lovitul.getLocation(),Sound.BLOCK_SLIME_BLOCK_BREAK,(float)2.0,(float)1.0);

    						}else {
    							if(lovitul.getEquipment().getHelmet().getType()==Material.IRON_HELMET) {
    								
    								dmg=dmg*0.5;
    								lovitul.getWorld().spawnParticle(Particle.BLOCK_DUST, lovitul.getLocation().add(0,2,0), 100, Bukkit.createBlockData(Material.IRON_BLOCK));
    								lovitul.getWorld().playSound(lovitul.getLocation(),Sound.BLOCK_BELL_USE,(float)2.0,(float)2.0);
    							}
    						}
    					}else{                            //end hs if
    						if(lovitul.getEquipment().getChestplate()!=null) {
    							if(lovitul.getEquipment().getChestplate().getType()==Material.CHAINMAIL_CHESTPLATE) {
    								dmg=dmg*0.6;
    							}
    						}
    					}
    					
    					if (dmg>0) {
    						lovitul.damage(dmg);
    						Bukkit.broadcastMessage(String.valueOf(dmg));
    					}
    					lovitul.setNoDamageTicks(0);
    				}
    			}
    				
    			for(int i=0;i<gloanteshotgun.size();i++) {//---------------shotgun
    				if(gloanteshotgun.get(i).asInt()==1) {
    					Bukkit.broadcastMessage("lovit");
    					dmg=2-lovitorul.getTicksLived()/25;
    					
    					if(lovitorul.getLocation().getY()< lovitul.getEyeHeight()+lovitul.getLocation().getY()+0.25 && lovitorul.getLocation().getY()> lovitul.getEyeHeight()+lovitul.getLocation().getY()-0.25) {
    						//---------------cap
    						Bukkit.broadcastMessage("headshot");
    						if(lovitul instanceof Player) {
    							if( ((HumanEntity)lovitul).getInventory().getHelmet().getType()==Material.IRON_HELMET) {
    								lovitul.damage(dmg*0.3);
    								lovitul.getWorld().spawnParticle(Particle.BLOCK_DUST, lovitul.getLocation().add(0,2,0), 100, Bukkit.createBlockData(Material.IRON_BLOCK));
    								lovitul.getWorld().playSound(lovitul.getLocation(),Sound.BLOCK_BELL_USE,(float)2.0,(float)2.0);
    							}else {
    								lovitul.damage(dmg*1.7);
    								lovitul.getWorld().spawnParticle(Particle.BLOCK_DUST, lovitul.getLocation().add(0,2,0), 100, Bukkit.createBlockData(Material.REDSTONE_BLOCK));
        							lovitul.getWorld().playSound(lovitul.getLocation(),Sound.BLOCK_SLIME_BLOCK_BREAK,(float)2.0,(float)1.0);

    							}
    						}
    					}
    					if (dmg>0) {
    						lovitul.damage(dmg);
    					}
    					lovitul.setNoDamageTicks(0);
    					
    				}
    			}
    			
    			
    			}
    		}
    	
    	}
    
}
    
    
