import win32api, win32con
from PIL import ImageOps
from numpy import *
import cv2
from PIL import ImageGrab
import os
import time
import imutils

xpad=380
ypad=80

def screenGrab():
    box = (xpad,ypad,xpad+1120,ypad+720)
    im = ImageGrab.grab(box)
    im.save(os.getcwd() + '\\p' + '.png', 'PNG')
    #str(int(time.time()))

def leftClick():
    win32api.mouse_event(win32con.MOUSEEVENTF_LEFTDOWN,0,0)
    time.sleep(.1)
    win32api.mouse_event(win32con.MOUSEEVENTF_LEFTUP,0,0)
    print("Clic")   

vkcode = {'backspace':0x08,
           'tab':0x09,
           'clear':0x0C,
           'enter':0x0D,
           'shift':0x10,
           'ctrl':0x11,
           'alt':0x12,
           'pause':0x13,
           'caps_lock':0x14,
           'esc':0x1B,
           'spacebar':0x20,
           'page_up':0x21,
           'page_down':0x22,
           'end':0x23,
           'home':0x24,
           'left_arrow':0x25,
           'up_arrow':0x26,
           'right_arrow':0x27,
           'down_arrow':0x28,
           'select':0x29,
           'print':0x2A,
           'execute':0x2B,
           'print_screen':0x2C,
           'ins':0x2D,
           'del':0x2E,
           'help':0x2F,
           '0':0x30,
           '1':0x31,
           '2':0x32,
           '3':0x33,
           '4':0x34,
           '5':0x35,
           '6':0x36,
           '7':0x37,
           '8':0x38,
           '9':0x39,
           'a':0x41,
           'b':0x42,
           'c':0x43,
           'd':0x44,
           'e':0x45,
           'f':0x46,
           'g':0x47,
           'h':0x48,
           'i':0x49,
           'j':0x4A,
           'k':0x4B,
           'l':0x4C,
           'm':0x4D,
           'n':0x4E,
           'o':0x4F,
           'p':0x50,
           'q':0x51,
           'r':0x52,
           's':0x53,
           't':0x54,
           'u':0x55,
           'v':0x56,
           'w':0x57,
           'x':0x58,
           'y':0x59,
           'z':0x5A,
           'numpad_0':0x60,
           'numpad_1':0x61,
           'numpad_2':0x62,
           'numpad_3':0x63,
           'numpad_4':0x64,
           'numpad_5':0x65,
           'numpad_6':0x66,
           'numpad_7':0x67,
           'numpad_8':0x68,
           'numpad_9':0x69,
           'multiply_key':0x6A,
           'add_key':0x6B,
           'separator_key':0x6C,
           'subtract_key':0x6D,
           'decimal_key':0x6E,
           'divide_key':0x6F,
           'F1':0x70,
           'F2':0x71,
           'F3':0x72,
           'F4':0x73,
           'F5':0x74,
           'F6':0x75,
           'F7':0x76,
           'F8':0x77,
           'F9':0x78,
           'F10':0x79,
           'F11':0x7A,
           'F12':0x7B,
           'F13':0x7C,
           'F14':0x7D,
           'F15':0x7E,
           'F16':0x7F,
           'F17':0x80,
           'F18':0x81,
           'F19':0x82,
           'F20':0x83,
           'F21':0x84,
           'F22':0x85,
           'F23':0x86,
           'F24':0x87,
           'num_lock':0x90,
           'scroll_lock':0x91,
           'left_shift':0xA0,
           'right_shift ':0xA1,
           'left_control':0xA2,
           'right_control':0xA3,
           'left_menu':0xA4,
           'right_menu':0xA5,
           'browser_back':0xA6,
           'browser_forward':0xA7,
           'browser_refresh':0xA8,
           'browser_stop':0xA9,
           'browser_search':0xAA,
           'browser_favorites':0xAB,
           'browser_start_and_home':0xAC,
           'volume_mute':0xAD,
           'volume_Down':0xAE,
           'volume_up':0xAF,
           'next_track':0xB0,
           'previous_track':0xB1,
           'stop_media':0xB2,
           'play/pause_media':0xB3,
           'start_mail':0xB4,
           'select_media':0xB5,
           'start_application_1':0xB6,
           'start_application_2':0xB7,
           'attn_key':0xF6,
           'crsel_key':0xF7,
           'exsel_key':0xF8,
           'play_key':0xFA,
           'zoom_key':0xFB,
           'clear_key':0xFE,
           '+':0xBB,
           ',':0xBC,
           '-':0xBD,
           '.':0xBE,
           '/':0xBF,
           '`':0xC0,
           ';':0xBA,
           '[':0xDB,
           '\\':0xDC,
           ']':0xDD,
           "'":0xDE,
           '`':0xC0}

def press(*args):
    '''
    one press, one release.
    accepts as many arguments as you want. e.g. press('left_arrow', 'a','b').
    '''
    for i in args:
        win32api.keybd_event(vkcode[i], 0,0,0)
        time.sleep(.05)
        win32api.keybd_event(vkcode[i],0 ,win32con.KEYEVENTF_KEYUP ,0)

def pressAndHold(*args):
    '''
    press and hold. Do NOT release.
    accepts as many arguments as you want.
    e.g. pressAndHold('left_arrow', 'a','b').
    '''
    for i in args:
        win32api.keybd_event(vkcode[i], 0,0,0)
        time.sleep(.05)

def mousePos(cord):
    win32api.SetCursorPos((xpad + cord[0], ypad + cord[1]))

def release(*args):
    '''
    release depressed keys
    accepts as many arguments as you want.
    e.g. release('left_arrow', 'a','b').
    '''
    for i in args:
           win32api.keybd_event(vkcode[i],0 ,win32con.KEYEVENTF_KEYUP ,0)

def getcoords():
    x,y = win32api.GetCursorPos()
    x = x - xpad
    y = y - ypad
    print(x,y)

def main():
	time.sleep(1)
	r1=r2=r3=r4=0
	threshold1 = 0.55
	threshold2 = 0.49
	threshold3 = 0.53
	threshold4 = 0.615
	threshold5 = 0.3
	coords=[]
	playerpos=(0,0)
	inamic1 = cv2.imread("Layer 1.png",cv2.IMREAD_UNCHANGED)
	player = cv2.imread("player.png",cv2.IMREAD_UNCHANGED)
	inamic2 = cv2.imread("Layer 2.png",cv2.IMREAD_UNCHANGED)
	inamic3 = cv2.imread("Layer 3.png",cv2.IMREAD_UNCHANGED)
	inamic4 = cv2.imread("Layer 4.png",cv2.IMREAD_UNCHANGED)

	inamic1 = imutils.resize(inamic1, width = int(inamic1.shape[1] * 2))
	inamic2 = imutils.resize(inamic2, width = int(inamic2.shape[1] * 2))
	inamic3 = imutils.resize(inamic3, width = int(inamic3.shape[1] * 2))
	inamic4 = imutils.resize(inamic4, width = int(inamic4.shape[1] * 2))
	player = imutils.resize(player, width = int(player.shape[1] * 2))

	inamic1=cv2.cvtColor(inamic1,cv2.COLOR_RGB2GRAY)
	inamic2=cv2.cvtColor(inamic2,cv2.COLOR_RGB2GRAY)
	inamic3=cv2.cvtColor(inamic3,cv2.COLOR_RGB2GRAY)
	inamic4=cv2.cvtColor(inamic4,cv2.COLOR_RGB2GRAY)
	player=cv2.cvtColor(player,cv2.COLOR_RGB2GRAY)
	while(True):
		if win32api.GetAsyncKeyState(win32con.VK_CAPITAL) == 1 :
			break
		
		time.sleep(0.5)
		screenGrab()
		coords=[]
		image = cv2.imread("p.png",cv2.IMREAD_UNCHANGED)
	
		image=cv2.cvtColor(image,cv2.COLOR_RGB2GRAY)
	
		res1 = cv2.matchTemplate(image,inamic1,cv2.TM_CCOEFF_NORMED)
		loc = where( res1 >= threshold1)
		for pt in zip(*loc[::-1]):
			if pt not in coords:
				coords.append(pt)
			#cv2.rectangle(image, pt, (pt[0] + inamic1.shape[1], pt[1] + inamic1.shape[0]), (0,0,255), 2)

	
		res2 = cv2.matchTemplate(image,inamic2,cv2.TM_CCOEFF_NORMED)
		loc = where( res2 >= threshold2)
		for pt in zip(*loc[::-1]):
			if pt not in coords:
				coords.append(pt)
			#cv2.rectangle(image, pt, (pt[0] + inamic2.shape[1], pt[1] + inamic2.shape[0]), (255,0,255), 2)
		
	

		res3 = cv2.matchTemplate(image,inamic3,cv2.TM_CCOEFF_NORMED)
		loc = where( res3 >= threshold3)
		for pt in zip(*loc[::-1]):
			if pt not in coords:
				coords.append(pt)
			#cv2.rectangle(image, pt, (pt[0] + inamic3.shape[1], pt[1] + inamic3.shape[0]), (255,0,255), 2)
		

		res4 = cv2.matchTemplate(image,inamic4,cv2.TM_CCOEFF_NORMED)
		loc = where( res4 >= threshold4)
		for pt in zip(*loc[::-1]):
			if pt not in coords:
				coords.append(pt)
			#cv2.rectangle(image, pt, (pt[0] + inamic4.shape[1], pt[1] + inamic4.shape[0]), (255,0,255), 2)
	
		res5 = cv2.matchTemplate(image,player,cv2.TM_CCOEFF_NORMED)
		loc = where( res5 >= threshold5)
		for pt in zip(*loc[::-1]):
			playerpos=pt
			#cv2.rectangle(image, pt, (pt[0] + player.shape[1], pt[1] + player.shape[0]), (255,0,255), 2)
	
		#cv2.imwrite('res.png',image)
		print(coords)
		print(playerpos)
		if coords==[]:
			coords=[(0,0)]

		if playerpos[0]<coords[0][0]:
			release("left_arrow")
			pressAndHold("right_arrow")
		if playerpos[0]<coords[0][0]:
			release("right_arrow")
			pressAndHold("left_arrow")
		if playerpos[0]<coords[0][0]+20 or playerpos[0]<coords[0][0]-20 :
			release("left_arrow")
			release("right_arrow")
			
			
main()
